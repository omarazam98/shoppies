{"version":3,"sources":["reducers/movieReducer.tsx","reducers/index.tsx","actions/movieActions.tsx","components/movieGridList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["intialState","list","selected","localStorage","getItem","JSON","parse","movieReducer","state","action","setItem","stringify","console","log","type","payload","Search","movieList","Object","assign","map","movie","imdbID","selectedMovie","filteredMovies","rootReducer","combineReducers","movies","fetchMovies","term","a","fetch","request","json","response","connect","selectedList","dispatch","searchMovies","then","nominateMovie","removeNomination","props","Box","display","width","style","backgroundColor","height","window","innerHeight","overflow","TextField","label","placeholder","variant","fullWidth","onChange","event","target","value","GridList","spacing","cellHeight","cols","keys","movieId","GridListTile","Card","CardContent","Poster","CardMedia","component","alt","image","title","GridListTileBar","Title","subtitle","Year","actionIcon","IconButton","disabled","color","onClick","Container","ListSubheader","selectedId","src","aria-label","Snackbar","anchorOrigin","vertical","horizontal","open","length","message","store","createStore","allReducers","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ab2f9f8.chunk.js","sourcesContent":["\nlet intialState = { list: [], selected: []}\nif(localStorage.getItem('state') !== null){\n    intialState = JSON.parse(localStorage.getItem('state') as string)\n}\n\nconst movieReducer = (state = intialState, action: any) => {\n    localStorage.setItem('state', JSON.stringify(state));\n    console.log(localStorage.getItem('state'))\n    switch (action.type){\n        case 'FETCH_MOVIES' :\n            if(action.payload.Search){\n                const movieList = Object.assign( {}, ...action.payload.Search.map((movie: any) => ({[movie.imdbID]: movie})))\n                return {...state, list: movieList}\n            }\n            break;\n        case 'NOMINATE_MOVIE' :\n            const selectedMovie = Object.assign( {}, state.selected, action.payload)\n            return {\n                ...state,\n                selected: selectedMovie\n            }\n        case 'REMOVE_NOMINATION' :\n            const filteredMovies = Object.assign({}, state.selected)\n            delete filteredMovies[action.payload]\n            return {\n                ...state,\n                selected: filteredMovies\n            }\n\n    }\n    return state;\n}\n\nexport default movieReducer;","import { combineReducers } from 'redux';\nimport movieReducer from './movieReducer';\n\nconst rootReducer = combineReducers({\n    movies: movieReducer\n});\n\nexport default rootReducer;","export const fetchMovies = async (term: any) => {\n    const request = await fetch(`https://www.omdbapi.com/?s=${term}&apikey=c00e4098`);\n    const response = await request.json();\n    return {\n        type: 'FETCH_MOVIES',\n        payload: response\n    }\n}","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {\n    GridList,\n    GridListTile,\n    GridListTileBar,\n    Box,\n    IconButton,\n    ListSubheader,\n    Card,\n    CardMedia,\n    CardContent,\n    Container,\n    Snackbar,\n} from \"@material-ui/core\";\nimport {TextField} from \"@material-ui/core\";\nimport {fetchMovies} from '../actions/movieActions'\n\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\n\nconst MovieGridList = (props : any) => {\n    // @ts-ignore\n    return (\n        <Box display={'flex'} width={'100%'}>\n            <Box width={'80%'} style={{backgroundColor: \"grey\", height: window.innerHeight, overflow: 'auto'}}>\n                <TextField\n                    label=\"The Shoppies\"\n                    placeholder=\"Search\"\n                    variant = \"filled\"\n                    fullWidth\n                    onChange={(event => {\n                        props.searchMovies(event.target.value)\n                    })}\n                />\n                <GridList spacing={10} cellHeight={150} cols={4}>\n                    {Object.keys(props.movieList).map((movieId : any) => (\n                        <GridListTile key={props.movieList[movieId].imdbID}>\n                            <Card style={{backgroundColor: \"gray\"}}>\n                            <CardContent>\n                                {props.movieList[movieId].Poster !== \"N/A\" ?\n                                    <CardMedia\n                                        component=\"img\"\n                                        alt=\"Contemplative Reptile\"\n                                        height=\"140\"\n                                        image={props.movieList[movieId].Poster}\n                                        title=\"Contemplative Reptile\"\n                                    /> :\n                                    <CardMedia\n                                        component=\"img\"\n                                        alt=\"Contemplative Reptile\"\n                                        height=\"140\"\n                                        image={'https://cdn.shopify.com/assets/images/logos/shopify-bag.png'}\n                                        title=\"Contemplative Reptile\"\n                                    />\n                                }\n                            </CardContent>\n                            </Card>\n                            <GridListTileBar\n                                title={props.movieList[movieId].Title}\n                                subtitle={props.movieList[movieId].Year}\n                                actionIcon={\n                                    <IconButton disabled={movieId in props.selectedList} color={'primary'} onClick={ () => props.nominateMovie({[movieId]: props.movieList[movieId]})}>\n                                        <AddCircleIcon/>\n                                    </IconButton>\n                                }\n                            />\n                        </GridListTile>\n                    ))}\n                </GridList>\n            </Box>\n            <Box width={'20%'} style={{backgroundColor: \"darkgray\", height: window.innerHeight, overflow: 'auto'}}>\n            <Container>\n            <GridList cellHeight={150} cols={1}>\n                    <GridListTile key=\"Subheader\" cols={1} style={{ height: 'auto' }}>\n                        <ListSubheader color={\"primary\"}>\n                            <h3>\n                                Nominations\n                            </h3>\n                        </ListSubheader>\n                    </GridListTile>\n                    {Object.keys(props.selectedList).map((selectedId : any) => (\n                        <GridListTile key={props.selectedList[selectedId].imdbID} >\n                            {console.log(props.selectedList[selectedId].Poster)}\n                            {props.selectedList[selectedId].Poster !== \"N/A\" ?\n                                <img src={props.selectedList[selectedId].Poster}/> :\n                                <img src={'https://cdn.shopify.com/assets/images/logos/shopify-bag.png'}/>\n                            }\n                            <GridListTileBar\n                                title={props.selectedList[selectedId].Title}\n                                subtitle={props.selectedList[selectedId].Year}\n                                actionIcon={\n                                    <IconButton aria-label={'Nominate'} color={'secondary'} onClick={ () => props.removeNomination(selectedId)}>\n                                        <RemoveCircleIcon/>\n                                    </IconButton>\n                                }\n                            />\n                        </GridListTile>\n                    ))}\n                </GridList>\n            </Container>\n            </Box>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={Object.keys(props.selectedList).length > 4}\n                message=\"Successfully selected 5 titles\"\n            />\n        </Box>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        movieList: state.movies.list,\n        selectedList: state.movies.selected\n    };\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        searchMovies: (term : any) => {fetchMovies(term).then((action => dispatch(action)))},\n        nominateMovie: (movie: any) => {dispatch({type: 'NOMINATE_MOVIE', payload: movie})},\n        removeNomination: (movie: any) => {dispatch({type: 'REMOVE_NOMINATION', payload: movie})}\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieGridList);","import React from 'react';\nimport {createStore} from \"redux\";\nimport {Provider } from 'react-redux';\nimport allReducers from './reducers/index'\nimport MovieGridList from \"./components/movieGridList\";\nimport {AppBar, Toolbar, Typography} from \"@material-ui/core\";\n\n// @ts-ignore\nconst store = createStore(allReducers)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n          <MovieGridList/>\n      </Provider>\n    </div>\n  );\n}\n\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}